[alias]
  co = commit
  com = commit -m
  s = status
  b = branch

  # Fancy branch display
  br = for-each-ref --sort=-committerdate refs/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  br-dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  ru = remote update

  # Clone a repository including all submodules
  c = clone --recursive

  # Add all files, including deletions
  ad = add . -A

  # Show diff, also diff staged files
  diffc = diff --cached

  # Pretty log
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

  # Revert any changes from the latest commit
  undo = reset --hard

  # Pull in remote changes for the current repository and all of its submodules
  p = !"git pull --rebase; git submodule foreach git pull --rebase origin master"

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git rebase master pr/$1 && \
      git checkout master && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[http]
  postBuffer = 52428800

[core]
  autocrlf = false
  
  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[color]
  ui = true

[push]
  default = simple

  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[user]
  name = Henrik Feldt
  email = henrik@haf.se

[github]
  user = haf

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[init]
  defaultBranch = main
